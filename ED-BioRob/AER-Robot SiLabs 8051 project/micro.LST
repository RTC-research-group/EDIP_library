C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MICRO
OBJECT MODULE PLACED IN micro.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe micro.c DB OE

stmt level    source

   1          
   2          
   3          #include "C8051F320.H"
   4          
   5          #include "micro.h"
   6          
   7          
   8          #include "cyg_aux.h"
   9          #include <intrins.h>
  10          #include "USB_REGISTER.h"
  11          #include "USB_DESCRIPTOR.h"
  12          
  13          #define  firmware_file "FIRMWAREBIN"
  14          #define  memory_file   "RAM     BIN"
  15          
  16          #define OUT_DATA_READ_BY_APPL EA=0;POLL_WRITE_BYTE(INDEX, 2);POLL_WRITE_BYTE(EOUTCSR1, 0);EA=1; 
  17          #define IN_DATA_SEND_BY_APPL EA=0;POLL_WRITE_BYTE(INDEX, 1);POLL_WRITE_BYTE(EINCSR1, rbInINPRDY);EA=1;
  18          
  19          #define SMAX 0x80
  20          
  21          
  22          void upload_to_device(unsigned long);
  23          void download_from_device(unsigned long);
  24          void upload_descriptor_string();
  25          void delayAER(void);
  26          
  27          void sendSensorValue(unsigned char,unsigned int);
  28          void sendConfigValue(unsigned char, unsigned int);
  29          void sendValue(unsigned char dir, unsigned char msb, unsigned char lsb);
  30          char SendByte(char byte);
  31          void initialize_robot(void);
  32          xdata unsigned char Out_Packet[64];   // Last packet received from host
  33          xdata unsigned char In_Packet[64]  ;   // Next packet to sent to host
  34          
  35          
  36          
  37          sfr16   ADC0    = 0xBD;
  38          
  39          sbit NSS=P0^3;
  40          sbit STR=P0^4;
  41          sbit RST_FPGA=P0^5;
  42          
  43          sbit LED1 = P2^4;
  44          sbit LED2 = P2^5;
  45          
  46          unsigned int statusRegister;
  47          unsigned int bdata sensorEnable;
  48          unsigned int mask;
  49          unsigned int FCmax[5], FCmin[5];
  50          
  51          
  52          bit entradapc;
  53          bit salidapc;
  54          idata unsigned int inp,outp;
  55          
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 2   

  56          xdata unsigned char sector[512];
  57          
  58          extern code const BYTE String2DescF[STR2LEN];
  59          
  60          char num_sensor;
  61          
  62          
  63          /*****************************************************************************
  64          * Function:     main
  65          
  66          *****************************************************************************/
  67          void main()
  68          {
  69   1          unsigned char iErrorCode=0;
  70   1              unsigned long longitud;
  71   1              unsigned char comando;
  72   1              
  73   1              unsigned int i;
  74   1      
  75   1      unsigned int value;
  76   1        
  77   1         // Disable Watchdog timer
  78   1      PCA0MD &= ~0x40;                    // WDTE = 0 (clear watchdog timer
  79   1                                             // enable)
  80   1      PORT_Init();                        // Initialize Port I/O
  81   1      SYSCLK_Init ();                     // Initialize Oscillator
  82   1      Usb0_Init(); 
  83   1      ADC0_Init();
  84   1      REF0CN    = 0x2B;       //REF
  85   1      
  86   1              NSS=1;          //Deseleccionamos al esclavo SPI
  87   1              RST_FPGA=1;     //Reseteamos la FPGA
  88   1              RST_FPGA=0;
  89   1              RST_FPGA=1;
  90   1              for (i=0;i<5;i++) { FCmax[i]=0; FCmin[i]=65535;}
  91   1              sensorEnable=0xFFFF;    //Habilitamos por defecto la lectura de todos los sensores
  92   1              statusRegister=0xD7FF;
  93   1      //      run , todo PT, uno PFM, otro PWM, todos enable. y 1 bit no usado, propagamos eventos o no, y enables en
             -coders
  94   1      //      sendConfigValue(0x00,statusRegister); //Inicializamos el estado
  95   1      
  96   1      // Entramos en el bucle para esperar ordenes del USB
  97   1      entradapc=1;
  98   1      salidapc=0;
  99   1      OUT_DATA_READ_BY_APPL     // Clear Out Packe
 100   1      
 101   1      for (i=0;i<64;i++)
 102   1              In_Packet[i]=0xff;
 103   1      
 104   1      
 105   1              In_Packet[32]=(unsigned char) (statusRegister/255);     //MSB
 106   1              In_Packet[33]=(unsigned char) (0x00FF & statusRegister);//LSB
 107   1              
 108   1              
 109   1        i=0;
 110   1        inp=0;
 111   1        outp=0;
 112   1      
 113   1        initialize_robot();  
 114   1      
 115   1        while(1){
 116   2              while(!salidapc) { 
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 3   

 117   3      
 118   3                      LED1=1;                 
 119   3                      LED2=1;
 120   3      
 121   3              }
 122   2              LED1=0;
 123   2              LED2=1;
 124   2              salidapc=0;
 125   2      
 126   2              if(Out_Packet[0]=='A' & Out_Packet[1]=='T' & Out_Packet[2]=='C')
 127   2                      {
 128   3                      comando =Out_Packet[3];
 129   3                      longitud = (unsigned long)Out_Packet[4];
 130   3                      longitud+=(unsigned long)Out_Packet[5]<<8;
 131   3                      longitud+=(unsigned long)Out_Packet[6]<<16;
 132   3                      longitud+=(unsigned long)Out_Packet[7]<<24;
 133   3      
 134   3                      if (comando == 1) 
 135   3                              upload_to_device(longitud);
 136   3                      else if (comando == 2)
 137   3                              download_from_device(longitud);
 138   3                      else if (comando == 3)
 139   3                              upload_descriptor_string();
 140   3                      else if (comando == 4)
 141   3                          {   RST_FPGA=1;     RST_FPGA=0;     RST_FPGA=1; }
 142   3       
 143   3                      }
 144   2              else{salidapc =0;OUT_DATA_READ_BY_APPL}     // Clear Out Packe
 145   2      
 146   2      
 147   2      
 148   2              }   
 149   1      }
*** WARNING C280 IN LINE 75 OF MICRO.C: 'value': unreferenced local variable
 150          
 151          
 152          void initialize_robot()
 153          {
 154   1          char i;
 155   1      
 156   1              //Turn on LED 0
 157   1              NSS=0; 
 158   1              SendByte(0);
 159   1              SendByte(0);
 160   1              SendByte(1);
 161   1              NSS=1;
 162   1      
 163   1              //Base
 164   1              NSS=0; 
 165   1              SendByte(0xF0);
 166   1              SendByte(128);
 167   1              SendByte(0);
 168   1              NSS=1;
 169   1      
 170   1          //activate spike_width of PI controller
 171   1              NSS=0; 
 172   1              SendByte(0x12);
 173   1              SendByte(20);
 174   1              SendByte(0);
 175   1              NSS=1;
 176   1      
 177   1              NSS=0; 
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 4   

 178   1              SendByte(0x42);
 179   1              SendByte(2);
 180   1              SendByte(0);
 181   1              NSS=1;
 182   1      
 183   1          for (i=0; i<=4; i++) {
 184   2                 NSS=0; 
 185   2                 SendByte(3+i);
 186   2                 SendByte(2);
 187   2                 SendByte(0);
 188   2                 NSS=1;
 189   2                 NSS=0; 
 190   2                 SendByte(0x30+i);
 191   2                 SendByte(2);
 192   2                 SendByte(0);
 193   2                 NSS=1;
 194   2                 NSS=0; 
 195   2                 SendByte(128+3+i);
 196   2                 SendByte(2);
 197   2                 SendByte(0);
 198   2                 NSS=1;
 199   2                 NSS=0; 
 200   2                 SendByte(128+0x30+i);
 201   2                 SendByte(2);
 202   2                 SendByte(0);
 203   2                 NSS=1;
 204   2              }  
 205   1      
 206   1              //Motor RX:
 207   1              //Move left until end sensed by ADC
 208   1              NSS=0; 
 209   1              SendByte(128+1);
 210   1              SendByte(170);
 211   1              SendByte(0);
 212   1              NSS=1;
 213   1              
 214   1              //Motor LX:
 215   1              //Move left until end sensed by ADC
 216   1              NSS=0; 
 217   1              SendByte(128+2);
 218   1              SendByte(0);
 219   1              SendByte(0);
 220   1              NSS=1;
 221   1      
 222   1              //Motor RY:
 223   1              //Move up until end sensed by ADC
 224   1      
 225   1              //Motor LY:
 226   1              //Move up until end sensed by ADC
 227   1      
 228   1              //Send reset for encoders start counting.
 229   1      
 230   1              //Motor RX:
 231   1              //Move right until end, sesed by ADC
 232   1      
 233   1              //Motor LX:
 234   1              //Move right until end, sesed by ADC
 235   1      
 236   1              //Motor RY:
 237   1              //Move down until end, sesed by ADC
 238   1      
 239   1              //Motor LY:
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 5   

 240   1              //Move down until end, sesed by ADC
 241   1      
 242   1              //Send order to PI controller to save encoders values
 243   1              //This order will set up the zero position to the middle for each controller / motor
 244   1      
 245   1      }
 246          
 247          //ADC end of conversion interrupt: will change periodically the source to convert for all the end of movem
             -ent
 248          //signals. If one of them is reached, a command has to be send to the controller in order to fix the maxim
             -um or
 249          //minimum spike frequency to actual one.
 250          
 251          void ADC_ISR (void) interrupt 10
 252          {
 253   1        unsigned int sensor=0;
 254   1      
 255   1        AD0INT = 0;
 256   1        sensor=((int)ADC0H*256+ADC0L);
 257   1        if (FCmax[num_sensor]<sensor) FCmax[num_sensor]=sensor;
 258   1        if (FCmin[num_sensor]>sensor) FCmin[num_sensor]=sensor;
 259   1      
 260   1        if (num_sensor<8) num_sensor++;
 261   1        else num_sensor=0;
 262   1        if (num_sensor >= 5 && num_sensor <=8 && sensor>SMAX) 
 263   1        {
 264   2              NSS=0; 
 265   2              SendByte(0);
 266   2              SendByte(0);
 267   2              SendByte(4);
 268   2              NSS=1;
 269   2           // enviar comando SPI al controlador para no seguir
 270   2        } else {
 271   2              NSS=0; 
 272   2              SendByte(0);
 273   2              SendByte(0);
 274   2              SendByte(0);
 275   2              NSS=1;
 276   2        }
 277   1      
 278   1        switch (num_sensor) {
 279   2           case 0: AMX0P=4;   AMX0N=5; break;
 280   2           case 1: AMX0P=6;   AMX0N=7; break;
 281   2           case 2: AMX0P=8;   AMX0N=9; break;
 282   2           case 3: AMX0P=0xA; AMX0N=0xB; break;
 283   2           case 4: AMX0P=0xC; AMX0N=0xD; break;
 284   2           case 5: AMX0P=0; AMX0N=0xff; break;  //Hall effect current sensor
 285   2           case 6: AMX0P=1; AMX0N=0xff; break;  //Hall effect current sensor 
 286   2           case 7: AMX0P=2; AMX0N=0xff; break;  //Hall effect current sensor
 287   2           case 8: AMX0P=3; AMX0N=0xff; break;  //Hall effect current sensor
 288   2        }
 289   1        AD0BUSY=1;
 290   1      }
 291          
 292          void upload_to_device(unsigned long longitud)
 293          {
 294   1          unsigned long i;
 295   1              unsigned char b1, b2, b3;
 296   1              //NSS=0;
 297   1              for(i=0;i<longitud;i++){
 298   2                      if ((i%64)==0){ // cada 64 bytes esperamos un nuevo paquete
 299   3                              OUT_DATA_READ_BY_APPL     // Clear Out
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 6   

 300   3                              while(!salidapc);
 301   3                              EA=0;salidapc =0;
 302   3                      }
 303   2          }
 304   1                      LED2=0;
 305   1                      //Poner Rutina atencion paquetes
 306   1                      NSS=0; //Transferimos los 3 bytes.
 307   1                      //SendByte(0x00);
 308   1                      b1=SendByte(Out_Packet[0]);
 309   1                      b2=SendByte(Out_Packet[1]);
 310   1                      b3=SendByte(Out_Packet[2]);
 311   1                      NSS=1;
 312   1                      EA=1;
 313   1                      LED2=1;
 314   1                      In_Packet[34] = b1; In_Packet[35]=b2;  //commands with address xF1-xF3 must be sent twice!!
 315   1                      In_Packet[36] = b3;        
 316   1              OUT_DATA_READ_BY_APPL     // Clear Out Packet
 317   1      }
 318          
 319          
 320          
 321          void download_from_device(unsigned long longitud)
 322          {
 323   1              //Actualizamos el valor del registro de estado
 324   1              In_Packet[32]=(unsigned char) (statusRegister/255);     //MSB
 325   1              In_Packet[33]=(unsigned char) (0x00FF & statusRegister);//LSB
 326   1              entradapc=1;
 327   1              OUT_DATA_READ_BY_APPL     // Clear Out Packe
 328   1              while(!entradapc);
 329   1               entradapc =0;
 330   1              //EA=0;
 331   1              Fifo_Write1(FIFO_EP1, EP1_PACKET_SIZE, (BYTE *)In_Packet);
 332   1              //No limpiamos el paquete de salida
 333   1      //       for(i=0;i<64;i++) In_Packet[i]=0x0;
 334   1                              
 335   1              IN_DATA_SEND_BY_APPL
 336   1                       
 337   1      }
*** WARNING C280 IN LINE 321 OF MICRO.C: 'longitud': unreferenced local variable
 338          
 339          void upload_descriptor_string(){
 340   1      
 341   1              OUT_DATA_READ_BY_APPL
 342   1              Page_Erase((char *)String2DescF);
 343   1              CopyDescStr((char *)&Out_Packet[8]);
 344   1      }
 345          
 346          //----------------------------------
 347          //  FIFO Write
 348          //----------------------------------
 349          //
 350          // Write to the selected endpoint FIFO
 351          //
 352          // Inputs:
 353          // addr: target address
 354          // uNumBytes: number of bytes to write
 355          // pData: location of source data
 356          //
 357          void Fifo_Write1(BYTE addr, unsigned int uNumBytes, BYTE * pData)
 358          {
 359   1         int i;
 360   1                                                
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 7   

 361   1         // If >0 bytes requested,
 362   1         if (uNumBytes) 
 363   1         {
 364   2            while(USB0ADR & 0x80);              // Wait for BUSY->'0'
 365   2                                                // (register available)
 366   2            USB0ADR = (addr);                   // Set address (mask out bits7-6)
 367   2      
 368   2            // Write <NumBytes> to the selected FIFO
 369   2            for(i=0;i<uNumBytes;i++)
 370   2            {  
 371   3               USB0DAT = pData[i];
 372   3               while(USB0ADR & 0x80);           // Wait for BUSY->'0' (data ready)
 373   3            }
 374   2         }
 375   1      }
 376          
 377          void sendValue(unsigned char dir, unsigned char msb, unsigned char lsb){
 378   1              NSS=0; //Transferimos los 3 bytes.
 379   1              SendByte(dir);
 380   1              SendByte(msb);
 381   1              SendByte(lsb);
 382   1              NSS=1;  
 383   1      }
 384          
 385          void sendConfigValue(unsigned char dir, unsigned int value){
 386   1              unsigned char frame [3];
 387   1              frame[0]=(0x3F & dir)|0x40;
 388   1              frame[1]= (unsigned char) (value/256); //(cogemos el MSB)
 389   1              frame[2]= (unsigned char) (0x00FF & value);// (Tomamos el LSB)
 390   1              NSS=0; //Transferimos los 3 bytes.
 391   1              SendByte(frame[0]);
 392   1              SendByte(frame[1]);
 393   1              SendByte(frame[2]);
 394   1              NSS=1;  
 395   1      }
 396          
 397          void sendSensorValue(unsigned char sensor,unsigned int value){
 398   1              unsigned char frame [3];
 399   1              frame[0]=0x1F & sensor;
 400   1              frame[1]= (unsigned char) (value/256); //(cogemos el MSB)
 401   1              frame[2]= (unsigned char) (0x00FF & value);// (Tomamos el LSB)
 402   1              NSS=0; //Transferimos los 3 bytes.
 403   1              SendByte(frame[0]);
 404   1              SendByte(frame[1]);
 405   1              SendByte(frame[2]);
 406   1              NSS=1;
 407   1      }
 408          
 409          char SendByte(char byte){
 410   1      
 411   1        while(!TXBMT);  //wait for xmit buffer empty
 412   1        SPI0DAT=byte;
 413   1      
 414   1        while(!SPIF); //wait for end of transmition
 415   1        SPIF=0;  //clear SPIF
 416   1        
 417   1        return SPI0DAT;
 418   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1447    ----
C51 COMPILER V7.06   MICRO                                                                 09/12/2019 10:41:16 PAGE 8   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    640    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27      36
   IDATA SIZE       =      4    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
